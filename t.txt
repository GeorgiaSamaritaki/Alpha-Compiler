(inserting sin in scope: 0 as library function)(inserting cos in scope: 0 as library function)(inserting sqrt in scope: 0 as library function)(inserting print in scope: 0 as library function)(inserting input in scope: 0 as library function)(inserting typeof in scope: 0 as library function)(inserting argument in scope: 0 as library function)(inserting strtonum in scope: 0 as library function)(inserting objectcopy in scope: 0 as library function)(inserting totalarguments in scope: 0 as library function)(inserting objectmemberkeys in scope: 0 as library function)(inserting objecttotalmembers in scope: 0 as library function)

 lvalue->id 'input' idlist_l->id1+  lvalue->id 'x'(inserting x in scope: 0 as global var) primary->lvalue  term->primary  expr->term  elist_l->expr  elist->elist_l  normcall->(elist)  callsuffix->normcall  call->lvaluecallsuffix  lvalue'x'() primary->call  term->primary  expr->term stmt->expr';' 
 lvalue->id 'read'[1;31m
_____________ERROR:line 3, before token: "(" message: function not found____________
[0m idlist_l->id1+  lvalue->id 'a'(inserting a in scope: 0 as global var) primary->lvalue  term->primary  expr->term  elist_l->expr  elist->elist_l  normcall->(elist)  callsuffix->normcall  call->lvaluecallsuffix  lvalue'a'() primary->call  term->primary  expr->term stmt->expr';' 
 lvalue->id 'a' assignexpr->lvalue  lvalue->id 'input' idlist_l->id1+  elist->empty  normcall->(elist)  callsuffix->normcall  call->lvaluecallsuffix  lvalue'input'() primary->call  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
(inserting foo in scope: 0 as user function) func_name->func_id  funcdef->( (inserting x in scope: 1 as formal var) idlist_l->id1  idlist->idlist_l  funcdef->) 

-----enter block ------  local id print [1;31m
_____________ERROR:line 8, before token: "print" message: shadowing of library functions not allowed____________
[0m'local id'[1;31m
_____________ERROR:line 8, before token: "=" message: Cannot assign to libfunc____________
[0m assignexpr->lvalue ERROR: Other token
ERROR: Other token
ERROR: Other token
 lvalue->id 'hello'ERROR: Other token
ERROR: Other token
ERROR: Other token
(inserting hello in scope: 1 as local var) primary->lvalue  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
 lvalue->id 'print' idlist_l->id1+  lvalue->id 'x' primary->lvalue  term->primary  expr->term  lvalue->id 'y'(inserting y in scope: 1 as local var) primary->lvalue  term->primary  expr->term  opexr->expr+expr  expr->opexpr  elist_l->expr  elist->elist_l  normcall->(elist)  callsuffix->normcall  call->lvaluecallsuffix  lvalue'y'() primary->call  term->primary  expr->term stmt->expr';' 
 local id hello 'local id' assignexpr->lvalue  lvalue->id 'a' primary->lvalue  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
 local id hello 'local id' assignexpr->lvalue  number->int  const->number  primary->const  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
[1;31m
_____________ERROR:line 12, before token: "hello" message: function name already used as var____________
[0m func_name->func_id  funcdef->(  idlist->emptyidlist  funcdef->) 

-----enter block ------  lvalue->id 'print' idlist_l->id1+  lvalue->::id  primary->lvalue  term->primary  expr->term  lvalue->::id  primary->lvalue  term->primary  expr->term  opexr->expr+expr  expr->opexpr  elist_l->expr  elist->elist_l  normcall->(elist)  callsuffix->normcall  call->lvaluecallsuffix  lvalue'x'() primary->call  term->primary  expr->term stmt->expr';' 
-----exit block ------

stmt->funcdef [1;31m
_____________ERROR:line 15, before token: "cos" message: shadowing of library functions not allowed____________
[0m func_name->func_id  funcdef->(  idlist->emptyidlist  funcdef->) 

-----enter block ------ -----exit block ------

stmt->funcdef -----exit block ------

stmt->funcdef (inserting f in scope: 0 as user function) func_name->func_id  funcdef->(  idlist->emptyidlist  funcdef->) 

-----enter block ------ -----exit block ------

stmt->funcdef  local id f 'local id' primary->lvalue  term->primary  expr->term stmt->expr';' 
 local id print [1;31m
_____________ERROR:line 22, before token: "print" message: shadowing of library functions not allowed____________
[0m'local id' primary->lvalue  term->primary  expr->term stmt->expr';' 
 local id y (inserting y in scope: 0 as global var)'local id' primary->lvalue  term->primary  expr->term stmt->expr';' 


-----enter block ------  local id f (inserting f in scope: 1 as local var)'local id' primary->lvalue  term->primary  expr->term stmt->expr';' 
 local id print [1;31m
_____________ERROR:line 26, before token: "print" message: shadowing of library functions not allowed____________
[0m'local id' primary->lvalue  term->primary  expr->term stmt->expr';' 
-----exit block ------

stmt->block2(inserting g in scope: 0 as user function) func_name->func_id  funcdef->( (inserting a in scope: 1 as formal var) idlist_l->id1 (inserting b in scope: 1 as formal var) idlist_l->id1+  idlist->idlist_l  funcdef->) 

-----enter block ------  local id a 'local id' assignexpr->lvalue  local id b 'local id' primary->lvalue  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
-----exit block ------

stmt->funcdef  lvalue->id 'x' assignexpr->lvalue  lvalue->id 'y' assignexpr->lvalue  number->int  const->number  primary->const  term->primary  expr->term  assignexpr->=expr  expr->assignexpr  assignexpr->=expr  expr->assignexpr stmt->expr';' 


-----enter block ------  lvalue->id 'x' assignexpr->lvalue  number->int  const->number  primary->const  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
 lvalue->id 'h'inserting in assign
(inserting h in scope: 1 as local var) assignexpr->lvalue  number->int  const->number  primary->const  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
(inserting f in scope: 1 as user function) func_name->func_id  funcdef->( (inserting z in scope: 2 as formal var) idlist_l->id1  idlist->idlist_l  funcdef->) 

-----enter block ------  lvalue->id 'x' assignexpr->lvalue  number->int  const->number  primary->const  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
 lvalue->id 'h'[1;31m
_____________ERROR:line 36, before token: "=" message: Cant reference variable out of scope____________
[0m assignexpr->lvalue  number->int  const->number  primary->const  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
 lvalue->id 'y' assignexpr->lvalue  number->int  const->number  primary->const  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 


-----enter block ------  lvalue->id 'z' assignexpr->lvalue  number->int  const->number  primary->const  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
(inserting g in scope: 3 as user function) func_name->func_id  funcdef->(  idlist->emptyidlist  funcdef->) 

-----enter block ------  lvalue->id 'z'fuck? 2 3
[1;31m
_____________ERROR:line 41, before token: ";" message: Cant reference variable out of scope____________
[0m primary->lvalue  term->primary  expr->term returnstmt=>"return expr;" stmt->returnstmt 

-----exit block ------

stmt->funcdef -----exit block ------

stmt->block2-----exit block ------

stmt->funcdef -----exit block ------

stmt->block2(inserting j in scope: 0 as user function) func_name->func_id  funcdef->(  idlist->emptyidlist  funcdef->) 

-----enter block ------ (inserting j in scope: 1 as user function) func_name->func_id  funcdef->(  idlist->emptyidlist  funcdef->) 

-----enter block ------ -----exit block ------

stmt->funcdef [1;31m
_____________ERROR:line 49, before token: "j" message: function name already used as func____________
[0m func_name->func_id  funcdef->(  idlist->emptyidlist  funcdef->) 

-----enter block ------ -----exit block ------

stmt->funcdef -----exit block ------

stmt->funcdef  lvalue->id 'k'inserting in assign
(inserting k in scope: 0 as global var) assignexpr->lvalue  number->int  const->number  primary->const  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
[1;31m
_____________ERROR:line 54, before token: "k" message: function name already used as var____________
[0m func_name->func_id  funcdef->(  idlist->emptyidlist  funcdef->) 

-----enter block ------ -----exit block ------

stmt->funcdef [1;31m
_____________ERROR:line 56, before token: "sin" message: shadowing of library functions not allowed____________
[0m func_name->func_id  funcdef->(  idlist->emptyidlist  funcdef->) 

-----enter block ------ -----exit block ------

stmt->funcdef ';' 

(inserting p in scope: 0 as user function) func_name->func_id  funcdef->( (inserting x in scope: 1 as formal var) idlist_l->id1 (inserting y in scope: 1 as formal var) idlist_l->id1+ (inserting z in scope: 1 as formal var) idlist_l->id1+  idlist->idlist_l  funcdef->) 

-----enter block ------ -----exit block ------

stmt->funcdef (inserting o in scope: 0 as user function) func_name->func_id  funcdef->( (inserting x in scope: 1 as formal var) idlist_l->id1 (inserting y in scope: 1 as formal var) idlist_l->id1+ [1;31m
_____________ERROR:line 63, before token: "x" message: variable redefined in same scope____________
[0m idlist_l->id1+  idlist->idlist_l  funcdef->) 

-----enter block ------ -----exit block ------

stmt->funcdef (inserting i in scope: 0 as user function) func_name->func_id  funcdef->( (inserting x in scope: 1 as formal var) idlist_l->id1 [1;31m
_____________ERROR:line 65, before token: "cos" message: formal arguement trying to shadow library func____________
[0m idlist_l->id1+  idlist->idlist_l  funcdef->) 

-----enter block ------ -----exit block ------

stmt->funcdef  lvalue->id 'print' idlist_l->id1+  lvalue->id 'typeof' idlist_l->id1+  lvalue->id 'r'(inserting r in scope: 0 as global var) primary->lvalue  term->primary  expr->term  elist_l->expr  elist->elist_l  normcall->(elist)  callsuffix->normcall  call->lvaluecallsuffix  lvalue'r'() primary->call  term->primary  expr->term  elist_l->expr  elist->elist_l  normcall->(elist)  callsuffix->normcall  call->lvaluecallsuffix  lvalue'r'() primary->call  term->primary  expr->term stmt->expr';' 
 lvalue->::id  idlist_l->id1+  lvalue->::id  idlist_l->id1+  lvalue->::id  primary->lvalue  term->primary  expr->term  elist_l->expr  elist->elist_l  normcall->(elist)  callsuffix->normcall  call->lvaluecallsuffix  lvalue'r'() primary->call  term->primary  expr->term  elist_l->expr  elist->elist_l  normcall->(elist)  callsuffix->normcall  call->lvaluecallsuffix  lvalue'r'() primary->call  term->primary  expr->term stmt->expr';' 
(inserting w in scope: 0 as user function) func_name->func_id  funcdef->( (inserting x in scope: 1 as formal var) idlist_l->id1 (inserting y in scope: 1 as formal var) idlist_l->id1+  idlist->idlist_l  funcdef->) 

-----enter block ------  lvalue->id 'print' idlist_l->id1+  lvalue->id 'x' primary->lvalue  term->primary  expr->term  lvalue->id 'y' primary->lvalue  term->primary  expr->term  opexr->expr+expr  expr->opexpr  elist_l->expr  elist->elist_l  normcall->(elist)  callsuffix->normcall  call->lvaluecallsuffix  lvalue'y'() primary->call  term->primary  expr->term stmt->expr';' 
 local id print [1;31m
_____________ERROR:line 74, before token: "print" message: shadowing of library functions not allowed____________
[0m'local id'[1;31m
_____________ERROR:line 74, before token: "=" message: Cannot assign to libfunc____________
[0m assignexpr->lvalue  lvalue->id 'y' primary->lvalue  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
 lvalue->::id  idlist_l->id1+  lvalue->id 'print' primary->lvalue  term->primary  expr->term  elist_l->expr  elist->elist_l  normcall->(elist)  callsuffix->normcall  call->lvaluecallsuffix  lvalue'print'() primary->call  term->primary  expr->term stmt->expr';' 
(inserting q in scope: 1 as user function) func_name->func_id  funcdef->(  idlist->emptyidlist  funcdef->) 

-----enter block ------  lvalue->id 'x'fuck? 1 1
[1;31m
_____________ERROR:line 77, before token: "+" message: Cant reference variable out of scope____________
[0m primary->lvalue  term->primary  expr->term  lvalue->id 'y'fuck? 1 1
[1;31m
_____________ERROR:line 77, before token: ";" message: Cant reference variable out of scope____________
[0m primary->lvalue  term->primary  expr->term  opexr->expr+expr  expr->opexpr returnstmt=>"return expr;" stmt->returnstmt 

-----exit block ------

stmt->funcdef  lvalue->id 'q' primary->lvalue  term->primary  expr->term returnstmt=>"return expr;" stmt->returnstmt 

-----exit block ------

stmt->funcdef  lvalue->id 'add'inserting in assign
(inserting add in scope: 0 as global var) assignexpr->lvalue (inserting $anonymous0 in scope: 0 as user function) func_name->annonymousfunc  funcdef->( (inserting x in scope: 1 as formal var) idlist_l->id1 (inserting y in scope: 1 as formal var) idlist_l->id1+  idlist->idlist_l  funcdef->) 

-----enter block ------  lvalue->id 'x' primary->lvalue  term->primary  expr->term  lvalue->id 'y' primary->lvalue  term->primary  expr->term  opexr->expr+expr  expr->opexpr returnstmt=>"return expr;" stmt->returnstmt 

-----exit block ------

 primary->(funcdef)  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 


-----enter block ------  local id x (inserting x in scope: 1 as local var)'local id' assignexpr->lvalue  lvalue->::id  primary->lvalue  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
 lvalue->id 'x' term->lvalue++  expr->term stmt->expr';' 
 local id s (inserting s in scope: 1 as local var)'local id' assignexpr->lvalue (inserting $anonymous1 in scope: 1 as user function) func_name->annonymousfunc  funcdef->(  idlist->emptyidlist  funcdef->) 

-----enter block ------  lvalue->id 'x'fuck? 1 1
[1;31m
_____________ERROR:line 87, before token: ";" message: Cant reference variable out of scope____________
[0m primary->lvalue  term->primary  expr->term returnstmt=>"return expr;" stmt->returnstmt 

-----exit block ------

 primary->(funcdef)  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
-----exit block ------

stmt->block2[1;31m
_____________ERROR:line 90, before token: "f" message: function name already used as func____________
[0m func_name->func_id  funcdef->( (inserting a in scope: 1 as formal var) idlist_l->id1 (inserting b in scope: 1 as formal var) idlist_l->id1+  idlist->idlist_l  funcdef->) 

-----enter block ------  local id a 'local id' assignexpr->lvalue  local id b 'local id' primary->lvalue  term->primary  expr->term  assignexpr->=expr  expr->assignexpr stmt->expr';' 
-----exit block ------

stmt->funcdef 
---------------------------------- Scope 0 ----------------------------------
        "$anonymous0"     [user function]  (lineno: 82) (scope: 0) (active:1)[args:'x''y''a''b']
                "add"        [global var]  (lineno: 82) (scope: 0) (active:1)
                  "w"     [user function]  (lineno: 72) (scope: 0) (active:1)[args:'x''y']
                  "r"        [global var]  (lineno: 68) (scope: 0) (active:1)
                  "i"     [user function]  (lineno: 65) (scope: 0) (active:1)[args:'x']
                  "o"     [user function]  (lineno: 63) (scope: 0) (active:1)[args:'x''y']
                  "p"     [user function]  (lineno: 61) (scope: 0) (active:1)[args:'x''y''z']
                  "k"        [global var]  (lineno: 52) (scope: 0) (active:1)
                  "j"     [user function]  (lineno: 47) (scope: 0) (active:1)[args:]
                  "g"     [user function]  (lineno: 29) (scope: 0) (active:1)[args:'a''b']
                  "y"        [global var]  (lineno: 23) (scope: 0) (active:1)
                  "f"     [user function]  (lineno: 18) (scope: 0) (active:1)[args:]
                "foo"     [user function]  (lineno:  7) (scope: 0) (active:1)[args:'x']
                  "a"        [global var]  (lineno:  3) (scope: 0) (active:1)
                  "x"        [global var]  (lineno:  1) (scope: 0) (active:1)
 "objecttotalmembers"  [library function]  (lineno:  0) (scope: 0) (active:1)
   "objectmemberkeys"  [library function]  (lineno:  0) (scope: 0) (active:1)
     "totalarguments"  [library function]  (lineno:  0) (scope: 0) (active:1)
         "objectcopy"  [library function]  (lineno:  0) (scope: 0) (active:1)
           "strtonum"  [library function]  (lineno:  0) (scope: 0) (active:1)
           "argument"  [library function]  (lineno:  0) (scope: 0) (active:1)
             "typeof"  [library function]  (lineno:  0) (scope: 0) (active:1)
              "input"  [library function]  (lineno:  0) (scope: 0) (active:1)
              "print"  [library function]  (lineno:  0) (scope: 0) (active:1)
               "sqrt"  [library function]  (lineno:  0) (scope: 0) (active:1)
                "cos"  [library function]  (lineno:  0) (scope: 0) (active:1)
                "sin"  [library function]  (lineno:  0) (scope: 0) (active:1)

---------------------------------- Scope 1 ----------------------------------
                  "b"        [formal var]  (lineno: 90) (scope: 1) (active:0)
                  "a"        [formal var]  (lineno: 90) (scope: 1) (active:0)
        "$anonymous1"     [user function]  (lineno: 87) (scope: 1) (active:0)[args:]
                  "s"         [local var]  (lineno: 87) (scope: 1) (active:0)
                  "x"         [local var]  (lineno: 85) (scope: 1) (active:0)
                  "y"        [formal var]  (lineno: 82) (scope: 1) (active:0)
                  "x"        [formal var]  (lineno: 82) (scope: 1) (active:0)
                  "q"     [user function]  (lineno: 76) (scope: 1) (active:0)[args:]
                  "y"        [formal var]  (lineno: 72) (scope: 1) (active:0)
                  "x"        [formal var]  (lineno: 72) (scope: 1) (active:0)
                  "x"        [formal var]  (lineno: 65) (scope: 1) (active:0)
                  "y"        [formal var]  (lineno: 63) (scope: 1) (active:0)
                  "x"        [formal var]  (lineno: 63) (scope: 1) (active:0)
                  "z"        [formal var]  (lineno: 61) (scope: 1) (active:0)
                  "y"        [formal var]  (lineno: 61) (scope: 1) (active:0)
                  "x"        [formal var]  (lineno: 61) (scope: 1) (active:0)
                  "j"     [user function]  (lineno: 48) (scope: 1) (active:0)[args:]
                  "f"     [user function]  (lineno: 34) (scope: 1) (active:0)[args:'z']
                  "h"         [local var]  (lineno: 33) (scope: 1) (active:0)
                  "b"        [formal var]  (lineno: 29) (scope: 1) (active:0)
                  "a"        [formal var]  (lineno: 29) (scope: 1) (active:0)
                  "f"         [local var]  (lineno: 25) (scope: 1) (active:0)
                  "y"         [local var]  (lineno:  9) (scope: 1) (active:0)
              "hello"         [local var]  (lineno:  8) (scope: 1) (active:0)
                  "x"        [formal var]  (lineno:  7) (scope: 1) (active:0)

---------------------------------- Scope 2 ----------------------------------
                  "z"        [formal var]  (lineno: 34) (scope: 2) (active:0)

---------------------------------- Scope 3 ----------------------------------
                  "g"     [user function]  (lineno: 41) (scope: 3) (active:0)[args:]
