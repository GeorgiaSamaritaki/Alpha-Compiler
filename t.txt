(inserting sin in scope: 0 as library function)
(inserting cos in scope: 0 as library function)
(inserting sqrt in scope: 0 as library function)
(inserting print in scope: 0 as library function)
(inserting input in scope: 0 as library function)
(inserting typeof in scope: 0 as library function)
(inserting argument in scope: 0 as library function)
(inserting strtonum in scope: 0 as library function)
(inserting objectcopy in scope: 0 as library function)
(inserting totalarguments in scope: 0 as library function)
(inserting objectmemberkeys in scope: 0 as library function)
(inserting objecttotalmembers in scope: 0 as library function)


lvalue->ids 'a1'
inserting in assign
(inserting a1 in scope: 0 as global var)
assignexpr->lvalue 
lvalue->ids 'a2'
inserting in assign
(inserting a2 in scope: 0 as global var)
assignexpr->lvalue 
lvalue->ids 'a3'
inserting in assign
(inserting a3 in scope: 0 as global var)
assignexpr->lvalue 
lvalue->ids 'a4'
inserting in assign
(inserting a4 in scope: 0 as global var)
assignexpr->lvalue 
const->nil 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
assignexpr->=expr 
expr->assignexpr 
assignexpr->=expr 
expr->assignexpr 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'global_var'
inserting in assign
(inserting global_var in scope: 0 as global var)
assignexpr->lvalue 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 


-----enter block ------ 
local id a1 
(inserting a1 in scope: 1 as local var)
assignexpr->lvalue 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 

-----exit block ------

stmt->block2(inserting foo in scope: 0 as user function)
func_name->func_id 
funcdef->( idlist->emptyidlist 
funcdef->) 


-----enter block ------ 
lvalue->::id 
assignexpr->lvalue 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 

-----exit block ------

stmt->funcdef lvalue->ids 'print'
lvalue->ids 'global_var'
primary->lvalue 
term->primary 
expr->term 
elist_l->expr 
const->string 
primary->const 
term->primary 
expr->term 
elist_l->elist_l,expr 
elist->elist_l 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
primary->call 
term->primary 
expr->term 
stmt->expr';' 
(inserting foo1 in scope: 0 as user function)
func_name->func_id 
funcdef->( idlist->emptyidlist 
funcdef->) 


-----enter block ------ 
local id global_var 
(inserting global_var in scope: 1 as local var)
assignexpr->lvalue 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'print'
lvalue->ids 'global_var'
primary->lvalue 
term->primary 
expr->term 
elist_l->expr 
const->string 
primary->const 
term->primary 
expr->term 
elist_l->elist_l,expr 
elist->elist_l 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
primary->call 
term->primary 
expr->term 
stmt->expr';' 

-----exit block ------

stmt->funcdef lvalue->ids 'print'
lvalue->ids 'global_var'
primary->lvalue 
term->primary 
expr->term 
elist_l->expr 
const->string 
primary->const 
term->primary 
expr->term 
elist_l->elist_l,expr 
elist->elist_l 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
primary->call 
term->primary 
expr->term 
stmt->expr';' 
lvalue->ids 'global_var'
assignexpr->lvalue 
lvalue->ids 'global_var'
primary->lvalue 
term->primary 
expr->term 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
opexr->expr+expr 
expr->opexpr 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'global_var'
assignexpr->lvalue 
lvalue->ids 'global_var'
primary->lvalue 
term->primary 
expr->term 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
opexr->expr-expr 
expr->opexpr 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'global_var'
assignexpr->lvalue 
lvalue->ids 'global_var'
primary->lvalue 
term->primary 
expr->term 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
opexr->expr*expr 
expr->opexpr 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'global_var'
assignexpr->lvalue 
lvalue->ids 'global_var'
primary->lvalue 
term->primary 
expr->term 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
opexr->expr/expr 
expr->opexpr 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'global_var'
assignexpr->lvalue 
lvalue->ids 'global_var'
primary->lvalue 
term->primary 
expr->term 
lvalue->ids 'global_var'
primary->lvalue 
term->primary 
expr->term 
opexr->expr-1.213413e-02xpr 
expr->opexpr 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'global_var'
assignexpr->lvalue 
const->true 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'global_var'
primary->lvalue 
term->primary 
expr->term 
term->NOTexpr 
expr->term 
lvalue->ids 'global_var'
assignexpr->lvalue 
const->true 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'global_var'
assignexpr->lvalue 
const->false 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
ifstmt->"if(expr) stmt else stmt" 
stmt->ifstmt 

lvalue->ids 'i'
inserting in assign
(inserting i in scope: 0 as global var)
assignexpr->lvalue 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
elist_l->expr 
elist->elist_l 
lvalue->ids 'i'
primary->lvalue 
term->primary 
expr->term 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
opexr->expr<expr 
expr->opexpr 
lvalue->ids 'global_var'
primary->lvalue 
term->primary 
expr->term 
opexr->expr&&expr 
expr->opexpr 
term->(expr) 
expr->term 
lvalue->ids 'i'
primary->lvalue 
term->primary 
expr->term 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
opexr->expr>expr 
expr->opexpr 
term->(expr) 
expr->term 
opexr->expr||expr 
expr->opexpr 
term->++lvalue 
lvalue->ids 'i'
expr->term 
elist_l->expr 
elist->elist_l 
forstmt->"for(elist; expr; elist)" 


-----enter block ------ 
lvalue->ids 'i'
term->lvalue++ 
expr->term 
stmt->expr';' 
lvalue->ids 'i'
primary->lvalue 
term->primary 
expr->term 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
opexr->expr!=expr 
expr->opexpr 
lvalue->ids 'print'
elist->empty 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
primary->call 
term->primary 
expr->term 
stmt->expr';' 
ifstmt->"if(expr) stmt" 
stmt->ifstmt 

lvalue->ids 'i'
primary->lvalue 
term->primary 
expr->term 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
opexr->expr<=expr 
expr->opexpr 


-----enter block ------ 
lvalue->ids 'i'
assignexpr->lvalue 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'print'
elist->empty 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
primary->call 
term->primary 
expr->term 
stmt->expr';' 
lvalue->ids 'i'
term->lvalue-- 
expr->term 
stmt->expr';' 
term->--lvalue 
lvalue->ids 'i'
expr->term 
stmt->expr';' 

-----exit block ------

stmt->block2ifstmt->"if(expr) stmt" 
stmt->ifstmt 

lvalue->ids 'i'
primary->lvalue 
term->primary 
expr->term 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
opexr->expr==expr 
expr->opexpr 
';' 

lvalue->ids 'i'
primary->lvalue 
term->primary 
expr->term 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
opexr->expr>=expr 
expr->opexpr 
';' 

stmt->Continue ';'  

ifstmt->"if(expr) stmt else stmt" 
stmt->ifstmt 

ifstmt->"if(expr) stmt else stmt" 
stmt->ifstmt 


-----exit block ------

stmt->block2stmt->forstmt   

lvalue->ids 'global_var'
primary->lvalue 
term->primary 
expr->term 
term->NOTexpr 
expr->term 


-----enter block ------ 
local id j 
(inserting j in scope: 1 as local var)
assignexpr->lvalue 
lvalue->ids 'global_var'
primary->lvalue 
term->primary 
expr->term 
term->NOTexpr 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->Break  ';'  

ifstmt->"if(expr) stmt" 
stmt->ifstmt 


-----exit block ------

stmt->block2whilestmt->"while(expr) stmt else stmt" 
stmt->whilestmt

lvalue->ids 'object'
inserting in assign
(inserting object in scope: 0 as global var)
assignexpr->lvalue 
elist->empty 
objextdef->[elist]
primary->objectdef 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'object'
assignexpr->lvalue 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
elist_l->expr 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
elist_l->elist_l,expr 
const->string 
primary->const 
term->primary 
expr->term 
elist_l->elist_l,expr 
elist->elist_l 
objextdef->[elist]
primary->objectdef 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'object'
assignexpr->lvalue 
const->string 
primary->const 
term->primary 
expr->term 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
indexedelem->{expr:expr} 
indexed->indexedelem 
const->string 
primary->const 
term->primary 
expr->term 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
indexedelem->{expr:expr} 
indexed->indexed,indexedelem 
const->string 
primary->const 
term->primary 
expr->term 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
indexedelem->{expr:expr} 
indexed->indexed,indexedelem 
objectdef->[indexed] 
primary->objectdef 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'object'
[1;31m
_____________ERROR:line 78, before token: ".." message: cant use variable as function____________
[0melist->empty 
methodcall->..id(elist) 
callsuffix->methodcall 
call->lvaluecallsuffix 
primary->call 
term->primary 
expr->term 
stmt->expr';' 
lvalue->ids 'object'
number->int 
const->number 
primary->const 
term->primary 
expr->term 
member->lvalue[expr] 
lvalue->member 
inserting in assign
____Null parameter in insert_____
assignexpr->lvalue 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'object'
const->string 
primary->const 
term->primary 
expr->term 
member->lvalue[expr] 
lvalue->member 
inserting in assign
(inserting object in scope: 0 as global var)
assignexpr->lvalue 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'object'
member->lvalue.id 
lvalue->member 
inserting in assign
(inserting test in scope: 0 as global var)
assignexpr->lvalue 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'object'
assignexpr->lvalue 
(inserting $anonymous0 in scope: 0 as user function)
func_name->annonymousfunc 
funcdef->( idlist->emptyidlist 
funcdef->) 


-----enter block ------ 

-----exit block ------

primary->(funcdef) 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
[1;31m
_____________ERROR:line 85, before token: "test" message: function name already used as var____________
[0mfunc_name->func_id 
funcdef->( idlist->emptyidlist 
funcdef->) 


-----enter block ------ 
(inserting test1 in scope: 1 as user function)
func_name->func_id 
funcdef->( idlist->emptyidlist 
funcdef->) 


-----enter block ------ 
lvalue->ids 'test'
primary->lvalue 
term->primary 
expr->term 
returnstmt=>"return expr;" 
stmt->returnstmt 


-----exit block ------

stmt->funcdef lvalue->ids 'test1'
primary->lvalue 
term->primary 
expr->term 
returnstmt=>"return expr;" 
stmt->returnstmt 


-----exit block ------

stmt->funcdef lvalue->ids 'test'
[1;31m
_____________ERROR:line 92, before token: "(" message: cant use variable as function____________
[0melist->empty 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
primary->call 
term->primary 
expr->term 
stmt->expr';' 
lvalue->ids 'test'
[1;31m
_____________ERROR:line 93, before token: "(" message: cant use variable as function____________
[0melist->empty 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
elist->empty 
call->call(elist) 
primary->call 
term->primary 
expr->term 
stmt->expr';' 
lvalue->ids 'test'
[1;31m
_____________ERROR:line 94, before token: "(" message: cant use variable as function____________
[0melist->empty 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
elist->empty 
call->call(elist) 
elist->empty 
call->call(elist) 
primary->call 
term->primary 
expr->term 
stmt->expr';' 
(inserting test1 in scope: 0 as user function)
func_name->func_id 
funcdef->( idlist->emptyidlist 
funcdef->) 


-----enter block ------ 
const->string 
primary->const 
term->primary 
expr->term 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
indexedelem->{expr:expr} 
indexed->indexedelem 
const->string 
primary->const 
term->primary 
expr->term 
const->string 
primary->const 
term->primary 
expr->term 
elist->empty 
objextdef->[elist]
primary->objectdef 
term->primary 
expr->term 
indexedelem->{expr:expr} 
indexed->indexedelem 
objectdef->[indexed] 
primary->objectdef 
term->primary 
expr->term 
indexedelem->{expr:expr} 
indexed->indexed,indexedelem 
objectdef->[indexed] 
primary->objectdef 
term->primary 
expr->term 
returnstmt=>"return expr;" 
stmt->returnstmt 


-----exit block ------

stmt->funcdef lvalue->ids 'test1'
elist->empty 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
member->call().id 
lvalue->member 
inserting in assign
(inserting a in scope: 0 as global var)
assignexpr->lvalue 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'test1'
elist->empty 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
member->call().id 
lvalue->member 
[1;31m
_____________ERROR:line 106, before token: "(" message: function not found____________
[0melist->empty 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
primary->call 
term->primary 
expr->term 
stmt->expr';' 
lvalue->ids 'test1'
elist->empty 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
member->call().id 
lvalue->member 
[1;31m
_____________ERROR:line 107, before token: "(" message: function not found____________
[0mnumber->int 
const->number 
primary->const 
term->primary 
expr->term 
elist_l->expr 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
elist_l->elist_l,expr 
elist->elist_l 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
primary->call 
term->primary 
expr->term 
stmt->expr';' 
lvalue->ids 'print'
elist->empty 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
member->call().id 
lvalue->member 
inserting in assign
(inserting a in scope: 0 as global var)
assignexpr->lvalue 
number->int 
const->number 
primary->const 
term->primary 
expr->term 
assignexpr->=expr 
expr->assignexpr 
stmt->expr';' 
lvalue->ids 'print'
lvalue->ids 'a1'
member->lvalue.id 
lvalue->member 
[1;31m
_____________ERROR:line 110, before token: "." message: variable undefined____________
[0mmember->lvalue.id 
lvalue->member 
[1;31m
_____________ERROR:line 110, before token: "." message: variable undefined____________
[0mmember->lvalue.id 
lvalue->member 
(inserting a4 in scope: 0 as global var)
primary->lvalue 
term->primary 
expr->term 
elist_l->expr 
const->string 
primary->const 
term->primary 
expr->term 
elist_l->elist_l,expr 
elist->elist_l 
normcall->(elist) 
callsuffix->normcall 
call->lvaluecallsuffix 
primary->call 
term->primary 
expr->term 
stmt->expr';' 

---------------------------------- Scope 0 ----------------------------------
                 "a4"        [global var]  (lineno:110) (scope: 0) (active:1)
                  "a"        [global var]  (lineno:108) (scope: 0) (active:1)
                  "a"        [global var]  (lineno:105) (scope: 0) (active:1)
              "test1"     [user function]  (lineno: 98) (scope: 0) (active:1)[args:]
        "$anonymous0"     [user function]  (lineno: 83) (scope: 0) (active:1)[args:]
               "test"        [global var]  (lineno: 81) (scope: 0) (active:1)
             "object"        [global var]  (lineno: 80) (scope: 0) (active:1)
             "object"        [global var]  (lineno: 71) (scope: 0) (active:1)
                  "i"        [global var]  (lineno: 41) (scope: 0) (active:1)
               "foo1"     [user function]  (lineno: 17) (scope: 0) (active:1)[args:]
                "foo"     [user function]  (lineno: 10) (scope: 0) (active:1)[args:]
         "global_var"        [global var]  (lineno:  4) (scope: 0) (active:1)
                 "a4"        [global var]  (lineno:  2) (scope: 0) (active:1)
                 "a3"        [global var]  (lineno:  2) (scope: 0) (active:1)
                 "a2"        [global var]  (lineno:  2) (scope: 0) (active:1)
                 "a1"        [global var]  (lineno:  2) (scope: 0) (active:1)
 "objecttotalmembers"  [library function]  (lineno:  0) (scope: 0) (active:1)
   "objectmemberkeys"  [library function]  (lineno:  0) (scope: 0) (active:1)
     "totalarguments"  [library function]  (lineno:  0) (scope: 0) (active:1)
         "objectcopy"  [library function]  (lineno:  0) (scope: 0) (active:1)
           "strtonum"  [library function]  (lineno:  0) (scope: 0) (active:1)
           "argument"  [library function]  (lineno:  0) (scope: 0) (active:1)
             "typeof"  [library function]  (lineno:  0) (scope: 0) (active:1)
              "input"  [library function]  (lineno:  0) (scope: 0) (active:1)
              "print"  [library function]  (lineno:  0) (scope: 0) (active:1)
               "sqrt"  [library function]  (lineno:  0) (scope: 0) (active:1)
                "cos"  [library function]  (lineno:  0) (scope: 0) (active:1)
                "sin"  [library function]  (lineno:  0) (scope: 0) (active:1)

---------------------------------- Scope 1 ----------------------------------
              "test1"     [user function]  (lineno: 86) (scope: 1) (active:0)[args:]
                  "j"         [local var]  (lineno: 65) (scope: 1) (active:0)
         "global_var"         [local var]  (lineno: 18) (scope: 1) (active:0)
                 "a1"         [local var]  (lineno:  7) (scope: 1) (active:0)
